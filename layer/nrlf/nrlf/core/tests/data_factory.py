"""

This library has been added to generate test data in a way that reduces the
amount of duplication and associated pain.  Hand writing test data has the
following problems:

1. The data is not generated by the domain logic, and may therefore contain bugs
2. We unintentionally re-test many low level features
3. Changes to features break LOTS of tests that are not testing the feature
   but are instead dependent upon it.

For example, take the DocumentReference.id which was originally coded with a
pipe separator and using long names.  We have since settled on ODS CODS and
using a FHIR compliant character.

so "ACUTE MENTAL HEALTH UNIT & DAY HOSPITAL|1234567890" becomes
"RP7EV-1234567890".  That line is used in at least 16 places, and those files
are then consumed by many many tests.

The replacement system uses code to generate test data.

This library allows you to generate a single success test case, that will
be suitable for most test cases, but then also allows you to amend that test
data to generate the failure outcomes that you are looking to test.

Usage:

call `generate_test_document_reference` with no parameters will generate
a standard FHIR compliant R4 DocumentReference.  You can then pass in
parameters to build variants for extra test cases.

e.g. Use a different subject/custodian; create invalid FHIR documents;
     create valid FHIR, with invalid or contradictory data;  Validate
     immutable fields cannot be changed; etc.

example 1: valid document

    doc = generate_test_document_reference()

example 2: different patient

    doc = generate_test_document_reference(
        subject = generate_test_subject(value="2360916696")
    )

example 3: illegal document id to test validation routines

    doc = generate_test_document_reference(
        id = "ILLEGAL_VALUE"
    )

"""

import random

SNOMED_SYSTEM = "https://snomed.info/ict"
SNOMED_CODES_MENTAL_HEALTH_CRISIS_PLAN = "736253002"
SNOMED_CODES_EMERGENCY_HEALTH_CARE_PLAN = "887701000000100"
SNOMED_CODES_END_OF_LIFE_CARE_COORDINATION_SUMMARY = "861421000000109"
SNOMED_CODES_NATIONAL_EARLY_WARNING_SCORE_2 = "1363501000000100"

FHIR_SYSTEMS_NHS_NUMBER = "https://fhir.nhs.uk/Id/nhs-number"
FHIR_SYSTEMS_ASID = "https://fhir.nhs.uk/Id/accredited-system-id"
FHIR_SYSTEMS_ODS_CODE = "https://fhir.nhs.uk/Id/ods-organization-code"

APIM_PATIENT_SUCCESS = "9000000009"
APIM_PATIENT_FAILURE = "9000000033"

NRL_ODS_SUCCESS = "RP7EV"  # ACUTE MENTAL HEALTH UNIT & DAY HOSPITAL

CONTENT_EXAMPLE_PDF_MIME = "application/pdf"
CONTENT_EXAMPLE_PDF_URL = "https://example.org/my-doc.pdf"

DOCUMENTS_SUCCESS = "1234567890"
DOCUMENT_ID_SEPARATOR = "|"


def generate_test_id(provider_id: str, local_document_id: str):
    return f"{provider_id}{DOCUMENT_ID_SEPARATOR}{local_document_id}"


def generate_test_attachment(
    url: str = CONTENT_EXAMPLE_PDF_URL,
    contentType: str = CONTENT_EXAMPLE_PDF_MIME,
):
    return {
        "contentType": contentType,
        "url": url,
    }


def generate_test_content(attachment=None):
    attachment = attachment if attachment is not None else generate_test_attachment()
    return [{"attachment": attachment}]


def generate_test_document_type(
    code: str = SNOMED_CODES_MENTAL_HEALTH_CRISIS_PLAN, system: str = SNOMED_SYSTEM
):
    return {
        "coding": [
            {
                "system": system,
                "code": code,
            }
        ]
    }


def generate_test_subject(
    value: str = APIM_PATIENT_SUCCESS,
    system: str = FHIR_SYSTEMS_NHS_NUMBER,
):
    return {
        "identifier": {
            "system": system,
            "value": value,
        }
    }


def generate_test_custodian(
    value: str = NRL_ODS_SUCCESS, system: str = FHIR_SYSTEMS_ASID
):
    return {
        "identifier": {
            "system": system,
            "value": value,
        }
    }


def generate_test_relates_to(
    id: str,
    code: str = "replaces",
):
    return {"relatesTo": [{"code": code, "target": {"id": id}}]}


def _strip_none(d: dict) -> dict:
    """
    Returns a dictionary with all the None entries removed
    """
    return {k: v for (k, v) in d.items() if v is not None}


def generate_test_nhs_number():
    # generated by http://danielbayley.uk/nhs-number/
    nhs_numbers = [
        "4168924866",
        "0735193274",
        "7520366847",
        "6335695421",
        "0060912367",
        "4037835789",
        "3632897506",
        "1661790674",
        "6815196046",
        "8313512970",
        "3898838269",
        "6060497578",
        "8197764271",
        "1087731844",
        "6885413259",
        "4695108844",
        "7770977266",
        "0898725143",
        "2378340052",
        "7588888415",
    ]
    return nhs_numbers[random.randrange(len(nhs_numbers))]


def generate_test_document_reference(
    provider_doc_id=None,
    id=None,
    provider_id=None,
    type=None,
    subject=None,
    custodian=None,
    content=None,
    status="current",
    relateTo=None,
    **kwargs,
):
    """
    generates a test DocumentReference in R4 format.  Arguments allow for substitutions to create variants or trigger non-compliance

    @param: provider_doc_id Set the documents identifier, local to the provider
    @param: id              Only set this if you want to trigger non-compliance with the values in `subject` and `local_doc_id`
    @param: provider_id     Only set this if you want to trigger non-compliance with the value in the `subject`
    @param: type            Builds the "type" block         (default generate_test_type())
    @param: subject         Builds the "subject" block      (default generate_test_subject())
    @param: custodian       Builds the "custodian" block    (default generate_test_custodian())
    @param: content         Builds the "content" block      (default generate_test_content())
    @param: status          The status field                (default "current")

    """
    # `type or generate_test_document_type()` still evaluates `generate_test_document_type()`
    type = type if type is not None else generate_test_document_type()
    subject = subject if subject is not None else generate_test_subject()
    custodian = custodian if custodian is not None else generate_test_custodian()
    content = content if content is not None else generate_test_content()
    provider_id = (
        provider_id if provider_id is not None else custodian["identifier"]["value"]
    )
    provider_doc_id = (
        provider_doc_id if provider_doc_id is not None else DOCUMENTS_SUCCESS
    )
    id = id if id is not None else generate_test_id(provider_id, provider_doc_id)
    return _strip_none(
        {
            "resourceType": "DocumentReference",
            "id": id,
            "status": status,
            "type": type,
            "subject": subject,
            "custodian": custodian,
            "content": content,
            "relatesTo": relateTo,
            **kwargs,
        }
    )
