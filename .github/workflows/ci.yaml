name: CI

on: pull_request

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  set-uniquish-id:
    # Set a uniquish ID - good enough for our purposes since it must be close enough to unique for
    # a) Terraform / AWS to allow clean build/destroys without side-effects (e.g. we don't
    #    want resources marked for deletion to be recreated in another CI run)
    # b) Not to fall foul of character limits on AWS resource names: the ID must be short
    name: Set Unique Environment ID
    runs-on: [self-hosted, ci]
    steps:
      - name: Set a uniquish ID
        id: set_uniqish_id
        run: |
          TIME_IN_SECONDS_SINCE_MIDNIGHT=$(date -d "1970-01-01 UTC $(date +%T)" +%s)
          echo "uniqish_id=${GITHUB_SHA::7}-${TIME_IN_SECONDS_SINCE_MIDNIGHT}" >> $GITHUB_OUTPUT
    outputs:
      uniqish_id: ${{ steps.set_uniqish_id.outputs.uniqish_id }}

  build:
    name: Build Application
    runs-on: [self-hosted, ci]
    steps:
      - name: Git Clone - ${{ github.event.pull_request.head.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup asdf cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf
        uses: asdf-vm/actions/install@v3.0.2

      - name: Install zip
        run: sudo apt-get install zip

      - name: Setup Python environment
        run: |
          poetry install --no-root
          source $(poetry env info --path)/bin/activate

      - name: Run Linting
        run: make lint

      - name: Run Unit Tests
        run: make test

      - name: Build Project
        run: make build

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/*.zip

  deploy:
    name: Deploy CI Environment
    runs-on: [self-hosted, ci]
    needs: [set-uniquish-id, build]
    steps:
      - name: Git Clone - ${{ github.event.pull_request.head.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup asdf cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Install asdf
        uses: asdf-vm/actions/install@v3.0.2

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CI_ROLE_NAME }}
          role-session-name: github-actions-ci-${{ needs.set-uniquish-id.outputs.uniqish_id }}

      - name: Retrieve Server Certificates
        run: aws s3 cp s3://nhsd-nrlf--truststore/server/dev.pem truststore/server/dev.pem

      - name: Get AWS Account ID
        id: get_account_id
        run: echo "aws_account_id=$(aws secretsmanager get-secret-value --secret-id nhsd-nrlf--mgmt--dev-account-id --query SecretString --output text)" >> "$GITHUB_OUTPUT"

      - name: Terraform Init
        run: |
          terraform -chdir=terraform/infrastructure init
          terraform -chdir=terraform/infrastructure workspace new ci-${{ needs.set-uniquish-id.outputs.uniqish_id }} || \
          terraform -chdir=terraform/infrastructure workspace select ci-${{ needs.set-uniquish-id.outputs.uniqish_id }}

      - name: Terraform Plan
        run: |
          terraform -chdir=terraform/infrastructure plan \
            --var-file=etc/dev.tfvars \
            --var assume_account=${{ steps.get_account_id.outputs.aws_account_id }} \
            --var assume_role=terraform \
            -out tfplan

      - name: Store Terraform Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-output
          path: terraform/infrastructure/tfplan*

      - name: Terraform Apply
        run: |
          terraform -chdir=terraform/infrastructure apply \
            --var-file=etc/dev.tfvars \
            --var assume_account=${{ steps.get_account_id.outputs.aws_account_id }} \
            --var assume_role=terraform \
            tfplan

      - name: Store Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/infrastructure/output.json

  integration-test:
    name: Run Integration Tests
    needs: [deploy]
    runs-on: [self-hosted, ci]

    steps:
      - name: Git Clone - ${{ github.event.pull_request.head.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup asdf cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

  performance-test:
    name: Run Performance Tests
    needs: [integration-test]
    runs-on: [self-hosted, ci]

    steps:
      - name: Git Clone - ${{ github.event.pull_request.head.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup asdf cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

  destroy:
    name: Destroy CI Environment
    needs: [set-uniquish-id, deploy, integration-test, performance-test]
    runs-on: [self-hosted, ci]
    if: ${{ always() }}

    steps:
      - name: Git Clone - ${{ github.event.pull_request.head.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup asdf cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CI_ROLE_NAME }}
          role-session-name: github-actions-ci-${{ needs.set-uniquish-id.outputs.uniqish_id }}

      - name: Get AWS Account ID
        id: get_account_id
        run: echo "aws_account_id=$(aws secretsmanager get-secret-value --secret-id nhsd-nrlf--mgmt--dev-account-id --query SecretString --output text)" >> "$GITHUB_OUTPUT"

      - name: Terraform Init
        run: |
          terraform -chdir=terraform/infrastructure init
          terraform -chdir=terraform/infrastructure workspace new ci-${{ needs.set-uniquish-id.outputs.uniqish_id }} || \
          terraform -chdir=terraform/infrastructure workspace select ci-${{ needs.set-uniquish-id.outputs.uniqish_id }}

      - name: Terraform Destroy
        run: |
          terraform -chdir=terraform/infrastructure destroy \
            --var-file=etc/dev.tfvars \
            --var assume_account=${{ steps.get_account_id.outputs.aws_account_id }} \
            --var assume_role=terraform \
            -auto-approve
